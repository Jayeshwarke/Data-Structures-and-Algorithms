import java.io.*;
import java.util.*;

public class Main {

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    String exp = br.readLine();
    Solution ob =new Solution();
    ob.evaluation(exp);
  }
}

class Solution{
	public int calculate(int v1, int v2, char o){
		if(o=='+'){
			return v2+v1;
		}else if(o=='*'){
			return v2*v1;
		}else if(o=='/'){
			return v2/v1;
		}else if(o=='-'){
			return v2-v1;
		}
		return -1;
	}

	
    public void evaluation(String exp){
        //Write code here
		Stack<Integer>st = new Stack<>();
		for(int i=0; i<exp.length(); i++){
			char ch = exp.charAt(i);

			if(Character.isDigit(ch)==true){
				st.push(ch-'0');
			}else{
				int v1= st.pop();
				int v2 = st.pop();
				int ans = calculate(v1,v2, ch);
				st.push(ans);
			}
		}
		System.out.println(st.peek());
		postfixToInfix(exp);
		PostFixtoprefix(exp);

		
	 }
	 public  boolean isOperator(char c) {
        return (c == '+' || c == '-' || c == '*' || c == '/' || c == '^');
    }
	 
	public void postfixToInfix(String postfix) {
  //while moving over expression check if the char is oprator .. true>>> then pop two and 
  // and then add them and push in stack again//
  //else... push the character into stack;
        Stack<String> stack = new Stack<String>();
        
        for (int i = 0; i < postfix.length(); i++) {
            char c = postfix.charAt(i);
            
            if (isOperator(c)) {
                String operand2 = stack.pop();
                String operand1 = stack.pop();
                String infix = "(" + operand1 + c + operand2 + ")";
                stack.push(infix);
            } else {
                stack.push(c + "");
            }
        }
        
        System.out.println(stack.pop());
    }

	public void PostFixtoprefix(String postFix){
		Stack<String>Stack = new Stack<>();
		for (int i = 0; i < postFix.length(); i++) {
            char c = postFix.charAt(i);
            
            if (isOperator(c)) {
                String operand1 = Stack.pop();
                String operand2 = Stack.pop();
                String infix =  c + operand2 + operand1;
                Stack.push(infix);
            } else {
                Stack.push(c + "");
            }
        }
        
        System.out.println(Stack.pop());
		
	}
}

	
	
